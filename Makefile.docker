default: build

CC = gcc
CPP = g++
LINK = $(CPP)
RM = /bin/rm -f

CTIME := $(shell date +%s)
BRANCH := $(shell git rev-parse --abbrev-ref HEAD)

# add -flto=auto flag on non-arm platforms
ifneq ($(findstring arm,$(uname_m)),arm)
LINKOPT += -flto=auto
endif

#DEBUG_FLAGS = -g3 -rdynamic -ggdb -D_DEBUG -D_TEST -D_GLIBCXX_DEBUG -O0
#DEBUG_LIBS = /usr/lib/debug/lib/x86_64-linux-gnu/libSegFault.so
PROD_FLAGS = -O3 -march=native -ffast-math
#LEAK_FLAGS = -D_LEAK_DETECTION
#PROF_FLAGS = -pg -D_GLIBCXX_DEBUG
#PROF_FLAGS = -fno-omit-frame-pointer

CFLAGS = -I include -std=c++11 -DCOMPILE_TIME=$(CTIME) -DTT_BRANCH='"$(BRANCH)"' -Wno-unused-result -Wno-format-truncation -Wno-psabi -Wno-deprecated-declarations $(LINKOPT) $(DEBUG_FLAGS) $(PROF_FLAGS) $(LEAK_FLAGS) $(PROD_FLAGS)
LFLAGS = -pthread $(LINKOPT) $(DEBUG_FLAGS) $(PROF_FLAGS)
LIBS = $(DEBUG_LIBS) -lz

INCS = $(wildcard include/*.h)
TINCS = $(wildcard test/include/*.h)

SRCS = $(wildcard src/*.cpp src/*/*.cpp)
TMPS = $(subst src,objs,$(SRCS))
OBJS = $(patsubst %.cpp,%.o,$(TMPS))
OBJI = $(filter-out objs/main.o,$(OBJS))
OBJJ = $(filter-out objs/stress_test.o,$(OBJI))
OBJL = $(filter-out objs/admin.o,$(OBJJ))

SRCT = $(wildcard test/*.cpp)
TMPT = $(subst test,objs,$(SRCT))
OBJT = $(patsubst %.cpp,%.o,$(TMPT))

TARGET = bin/tt
TESTS = bin/all_tests
TOOLS = bin/inspect

build: $(TARGET)

bin/tt: $(OBJS)
	@mkdir -p $(@D)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJS) $(LIBS)

objs/%.o: src/%.cpp $(INCS)
	@mkdir -p $(@D)
	$(CPP) $(CFLAGS) -c $< -o $@

objs/*/%.o: src/*/%.cpp $(INCS)
	@mkdir -p $(@D)
	$(CPP) $(CFLAGS) -c $< -o $@

objs/tools/%.o: tools/%.cpp
	@mkdir -p $(@D)
	$(CPP) $(CFLAGS) -c $< -o $@

TSRCS = $(wildcard test/*.cpp)
TOBJS = $(patsubst %.cpp,objs/%.o,$(TSRCS))

test: $(TESTS)

objs/test/%.o: test/%.cpp $(INCS) $(TINCS)
	@mkdir -p $(@D)
	$(CPP) $(CFLAGS) -I test/include -c $< -o $@

bin/all_tests: $(OBJI) $(TOBJS)
	@mkdir -p $(@D)
	$(LINK) $(LFLAGS) -o $@ $(OBJI) $(TOBJS) $(LIBS)

tools: $(TOOLS)
UOBJS = $(wildcard objs/tools/*.o)

#bin/backfill: objs/tools/backfill.o
#	@mkdir -p $(@D)
#	$(LINK) $(LFLAGS) -o $@ $< $(LIBS)

bin/inspect: objs/tools/inspect.o $(OBJI)
	@mkdir -p $(@D)
	$(LINK) $(LFLAGS) -o $@ $< $(OBJI) $(LIBS)

tt: clean build
all: build test tools

clean:
	$(RM) $(OBJS) $(TOBJS) $(UOBJS) $(TARGET) $(TESTS) $(TOOLS)
